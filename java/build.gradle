buildscript {
    if(ext.has('medvision')) {
        repositories {
            // need this to fetch buildlib when building on MEDvision CI
            maven {
                url "https://repository-zorggemak.forge.cloudbees.com/release/"
                credentials {
                    username project.cloudbeesUser
                    password project.cloudbeesPassword
                }
            }
        }
        dependencies {
            classpath 'com.medvision360.buildlib:buildlib:latest.integration'
        }
    }

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        // plugin for updating the license headers
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.5.0'
    }
}

if(ext.has('medvision')) {
    // mv-rootproject sets up internal repos and adds the build number to the version
    apply plugin: 'mv-rootproject'

    mvversion {
        major = 2
        minor = 0
        revision = 0
    }
}
else {
    allprojects {
        version = '2.0.0-SNAPSHOT'
    }
}

subprojects {
    apply plugin: 'maven'
    repositories {
        mavenCentral()
        maven {
            url 'http://maven.restlet.org'
        }
        maven {
            url 'http://files.basex.org/maven'
        }
        maven {
            url "http://repo.medvision360.org/release/"
        }
        maven {
            url "http://repo.medvision360.org/snapshot/"
        }

        // order matters...
        mavenLocal()
    }
}

allprojects {
    // The IDEA plugin picks up sourceCompatibility from the Java plugin so
    // make sure the root project has a proper Java configuration.
    apply plugin: 'java'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    // Gradle can generate IDEA project files.
    // Run 'gradle idea' and open the project file in IDEA.
    apply plugin: 'idea'

    idea.module.iml {
        whenMerged { module ->
            // split dependencies into module dependencies and jar dependencies
            def moduleDependencies = []
            module.dependencies.each { dependency ->
                if (dependency.class.simpleName == 'ModuleDependency') {
                    if (dependency.scope.equalsIgnoreCase("COMPILE")) {
                        moduleDependencies += dependency
                    }
                }
            }

            module.dependencies.removeAll(moduleDependencies)
            def jarDependencies = new LinkedHashSet(module.dependencies)

            module.dependencies.clear()
            module.dependencies.addAll(moduleDependencies)
            module.dependencies.addAll(jarDependencies)
        }
    }
}

subprojects {
    group = 'com.medvision360.medrecord'

    description = 'MEDvision360 MEDrecord, an openEHR based medical record server'

    // Update the license header on all files
    // run 'gradle licenseFormatMain' to update the license headers
    apply plugin: 'license'

    license {
        header rootProject.file('LICENSE.tpl')
        ext {
            year = Calendar.getInstance().get(Calendar.YEAR)
        }
    }

    ext {
        // Version numbers of dependencies.
        version = [
                archetypes          : '2.0.0',
                basex               : '7.7.2',
                boneCp              : '0.7.1.RELEASE',
                commonsCodec        : '1.8',
                commonsConfiguration: '1.9',
                commonsDbUtils      : '1.5',
                commonsCli          : '1.2',
                commonsIo           : '2.4',
                commonsLang3        : '3.1',
                freemarker          : '2.3.20',
                guava               : '15.0',
                gson                : '2.2.4',
                jackson             : '2.2.3',
                jaxen               : '1.1.4',
                jdom                : '2.0.2',
                jodatime            : '2.2',
                jstl                : '1.2',
                junit               : '4.11',
                logback             : '1.0.13',
                medvisionlib        : 'latest.integration',
                openEhr             : '1.0.6-SNAPSHOT',
                postgresql          : '9.2-1003-jdbc4',
                restlet             : '2.2-M1',
                saxon               : '9.5.1-3',
                servlet             : '3.1.0',
                slf4j               : '1.7.5',
                spring              : '3.2.5.RELEASE',
                tomcat              : '7.0.34',
                wslog               : '1.0.4',
        ]
    }

}

// build vendor stuff
task vendor(type: Exec) {
    workingDir 'medrecord-vendor'
    commandLine 'mvn', 'install', '-B', '-Dmaven.test.skip=true'
}

// so you can do 'gradle clean install tomcatRunWar' from the project root
task tomcatRunWar {
    dependsOn ':medrecord-server-server:tomcatRunWar'
}
