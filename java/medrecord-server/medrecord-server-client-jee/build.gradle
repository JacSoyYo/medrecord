description += ' client'

dependencies {
    compile "org.restlet.jee:org.restlet:${ext.version.restlet}"
    compile "com.medvision360.lib:libs-client-jee:${ext.version.medvisionlib}"
    compile project(":medrecord-server-api-jee")
}

if (ext.has('medvision')) {
    // these take care of publishing the jars and docs on repo.medvision360.org
    apply plugin: 'mv-java-clientlib'
    apply plugin: 'mv-public'


    //
    // store the generated sources so they can be compiled without the tools
    //

    dependencies {
        clientSource project(path: ":medrecord-server-api-jee", configuration: 'generatedClient')
    }

    def t = task copyGeneratedSource(type: Copy) {
        from 'generated-client-src/client'
        into 'src/main/java'
    }
    t.dependsOn('unzipGeneratedClientSource')

    tasks.compileJava.dependsOn('copyGeneratedSource')


    sourceSets {
        main {
            java {
                srcDirs = [ "src/main/java" ]
            }
        }
    }
}


import org.gradle.plugins.ide.idea.model.*
apply plugin: 'idea'

idea.module.iml {
    whenMerged { module ->

        // add module dependencies for medvision common libraries
        def toModuleDependencies = [
                'libs-api-jee',
                'libs-client-jee',
                'libs-common-jee'
        ]

        toModuleDependencies.each { dependencyName ->
            module.dependencies += new ModuleDependency(dependencyName, 'COMPILE')
        }

        // split dependencies into module dependencies and jar dependencies
        def moduleDependencies = []
        module.dependencies.each { dependency ->
            if (dependency.class.simpleName == 'ModuleDependency') {
                if (dependency.scope.equalsIgnoreCase("COMPILE")) {
                    moduleDependencies += dependency
                }
            }
        }

        module.dependencies.removeAll(moduleDependencies)
        def jarDependencies = new LinkedHashSet(module.dependencies)

        module.dependencies.clear()
        module.dependencies.addAll(moduleDependencies)
        module.dependencies.addAll(jarDependencies)
    }
}
