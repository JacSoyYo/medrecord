// WARNING, THIS FILE IS AUTOMATICALLY GENERATED
// DO NOT MODIFY !

package com.medvision360.medrecord.client.archetype;

import org.restlet.data.Language;
import org.restlet.data.Preference;
import org.restlet.resource.ClientResource;
import org.restlet.resource.ResourceException;


import com.medvision360.lib.client.ClientResourceBase;
import com.medvision360.lib.client.ClientResourceConfig;
import com.medvision360.lib.client.ErrorDocument;
import com.medvision360.lib.common.exceptions.AnnotatedResourceException;
import com.medvision360.lib.common.exceptions.ApiException;

/**
    @apipath /archetype

 */
public class ArchetypeResource extends ClientResourceBase
{
    /**
     * Constructor.
     *
     * <p>This constructor can be used to create a new client for this resource.</p>
     *
     * @param config_ Configuration object containing the location of the server
     *   this resource sends requests to.
     */
    public ArchetypeResource(
        final ClientResourceConfig config_
    )
    {
        super(config_, "/archetype");
    }

    /**
       Archetype resource.

Retrieve an archetype as an ADL string (plain text).



       <p>
       Use the {@link #getArchetype(String,ArchetypeResourceGetArchetypeParams)}
       method to pass additional query arguments.</p>

       @param id An OpenEHR ArchetypeID value

       @apiqueryparam id An OpenEHR ArchetypeID value.
[type=string,required,single,default=openEHR-EHR-OBSERVATION.blood_pressure.v1]



     */
    public java.lang.String getArchetype(
        final String id
    ) throws
        com.medvision360.medrecord.spi.exceptions.NotFoundException,
        com.medvision360.medrecord.spi.exceptions.MissingParameterException,
        com.medvision360.medrecord.spi.exceptions.RecordException,
        java.io.IOException
    {
      return getArchetype(
        id,
        null
      );
    }

    /**
       Archetype resource.

Retrieve an archetype as an ADL string (plain text).



       @param queryParams_ The query parameters to be added to the request.
       @param id An OpenEHR ArchetypeID value

       @apiqueryparam id An OpenEHR ArchetypeID value.
[type=string,required,single,default=openEHR-EHR-OBSERVATION.blood_pressure.v1]


     */
    public java.lang.String getArchetype(
        final String id,
        final ArchetypeResourceGetArchetypeParams queryParams_
    ) throws
        com.medvision360.medrecord.spi.exceptions.NotFoundException,
        com.medvision360.medrecord.spi.exceptions.MissingParameterException,
        com.medvision360.medrecord.spi.exceptions.RecordException,
        java.io.IOException
    {
        try
        {
            final ClientResource resource_ = getClientResource();
            if (queryParams_ != null)
            {
                queryParams_.applyTo(resource_);
            }

            resource_.addQueryParameter("id", id);
            final com.medvision360.medrecord.api.archetype.ArchetypeResource wrapped_ = resource_.wrap(com.medvision360.medrecord.api.archetype.ArchetypeResource.class);
            return wrapped_.getArchetype(
            );
        }
        catch(final ResourceException e_)
        {
            final ErrorDocument errorDocument_ = getErrorDocument();
            if (errorDocument_ != null)
            {
                switch(errorDocument_.getCode())
                {
                    case "NOT_FOUND_EXCEPTION":
                        throw new com.medvision360.medrecord.spi.exceptions.NotFoundException(errorDocument_.getArguments());
                    case "MISSING_PARAMETER_EXCEPTION":
                        throw new com.medvision360.medrecord.spi.exceptions.MissingParameterException(errorDocument_.getArguments());
                    case "RECORD_EXCEPTION":
                        throw new com.medvision360.medrecord.spi.exceptions.RecordException(errorDocument_.getArguments());
                }
            }
            throw e_;
        }
    }

    /**
       Archetype resource.

Retrieve an archetype encapsulated in JSON or XML.



       <p>
       Use the {@link #getArchetypeResult(String,ArchetypeResourceGetArchetypeResultParams)}
       method to pass additional query arguments.</p>

       @param id An OpenEHR ArchetypeID value

       @apiqueryparam id An OpenEHR ArchetypeID value.
[type=string,required,single,default=openEHR-EHR-OBSERVATION.blood_pressure.v1]



     */
    public com.medvision360.medrecord.api.archetype.ArchetypeResult getArchetypeResult(
        final String id
    ) throws
        com.medvision360.medrecord.spi.exceptions.NotFoundException,
        com.medvision360.medrecord.spi.exceptions.MissingParameterException,
        com.medvision360.medrecord.spi.exceptions.RecordException,
        java.io.IOException
    {
      return getArchetypeResult(
        id,
        null
      );
    }

    /**
       Archetype resource.

Retrieve an archetype encapsulated in JSON or XML.



       @param queryParams_ The query parameters to be added to the request.
       @param id An OpenEHR ArchetypeID value

       @apiqueryparam id An OpenEHR ArchetypeID value.
[type=string,required,single,default=openEHR-EHR-OBSERVATION.blood_pressure.v1]


     */
    public com.medvision360.medrecord.api.archetype.ArchetypeResult getArchetypeResult(
        final String id,
        final ArchetypeResourceGetArchetypeResultParams queryParams_
    ) throws
        com.medvision360.medrecord.spi.exceptions.NotFoundException,
        com.medvision360.medrecord.spi.exceptions.MissingParameterException,
        com.medvision360.medrecord.spi.exceptions.RecordException,
        java.io.IOException
    {
        try
        {
            final ClientResource resource_ = getClientResource();
            if (queryParams_ != null)
            {
                queryParams_.applyTo(resource_);
            }

            resource_.addQueryParameter("id", id);
            final com.medvision360.medrecord.api.archetype.ArchetypeResource wrapped_ = resource_.wrap(com.medvision360.medrecord.api.archetype.ArchetypeResource.class);
            return wrapped_.getArchetypeResult(
            );
        }
        catch(final ResourceException e_)
        {
            final ErrorDocument errorDocument_ = getErrorDocument();
            if (errorDocument_ != null)
            {
                switch(errorDocument_.getCode())
                {
                    case "NOT_FOUND_EXCEPTION":
                        throw new com.medvision360.medrecord.spi.exceptions.NotFoundException(errorDocument_.getArguments());
                    case "MISSING_PARAMETER_EXCEPTION":
                        throw new com.medvision360.medrecord.spi.exceptions.MissingParameterException(errorDocument_.getArguments());
                    case "RECORD_EXCEPTION":
                        throw new com.medvision360.medrecord.spi.exceptions.RecordException(errorDocument_.getArguments());
                }
            }
            throw e_;
        }
    }

}
