// WARNING, THIS FILE IS AUTOMATICALLY GENERATED
// DO NOT MODIFY !

package com.medvision360.medrecord.client.ehr;

import org.restlet.Client;
import org.restlet.data.Language;
import org.restlet.data.Preference;
import org.restlet.resource.ClientResource;
import org.restlet.resource.ResourceException;

import com.medvision360.lib.client.ClientResourceBase;
import com.medvision360.lib.client.ClientResourceConfig;
import com.medvision360.lib.client.ErrorDocument;
import com.medvision360.lib.common.exceptions.AnnotatedResourceException;
import com.medvision360.lib.common.exceptions.ApiException;

/**
    @apipath /ehr

 */
public class EHRListResource extends ClientResourceBase
{
    /**
     * Constructor.
     *
     * <p>This constructor can be used to create a new client for this resource.</p>
     *
     * @param config_ Configuration object containing the location of the server
     *   this resource sends requests to.
     */
    public EHRListResource(
        final ClientResourceConfig config_
    )
    {
        super(null, config_, "/ehr");
    }

    /**
     * Constructor.
     *
     * <p>This constructor can be used to create a new client for this resource.</p>
     *
     * @param client_ The client to use for making the connection.
     * @param config_ Configuration object containing the location of the server
     *   this resource sends requests to.
     */
    public EHRListResource(
        final Client client_,
        final ClientResourceConfig config_
    )
    {
        super(client_, config_, "/ehr");
    }

    /**
       Create EHR resource.

Creates a new EHR along with an EHRStatus from a path/value JSON document. The provided EHR and EHRStatus do
not need unique identifiers; if those are not provided they will be added by the server. If you do provide an
identifier, it will result in DUPLICATE_EXCEPTION if the EHR and/or EHRStatus already exists (use PUT on the
<code>/locatable</code> API to update an existing EHRStatus).

Returns the ID of the new EHR wrapped in a JSON document.



       <p>
       Use the {@link #postEHR(org.restlet.representation.Representation,EHRListResourcePostEHRParams)}
       method to pass additional query arguments.</p>


       

     */
    public com.medvision360.medrecord.api.ID postEHR(
        final org.restlet.representation.Representation representation
    ) throws
        com.medvision360.medrecord.api.exceptions.DuplicateException,
        com.medvision360.medrecord.api.exceptions.ClientParseException,
        com.medvision360.medrecord.api.exceptions.RecordException,
        com.medvision360.medrecord.api.exceptions.IORecordException
    {
      return postEHR(
        representation,
        null
      );
    }

    /**
       Create EHR resource.

Creates a new EHR along with an EHRStatus from a path/value JSON document. The provided EHR and EHRStatus do
not need unique identifiers; if those are not provided they will be added by the server. If you do provide an
identifier, it will result in DUPLICATE_EXCEPTION if the EHR and/or EHRStatus already exists (use PUT on the
<code>/locatable</code> API to update an existing EHRStatus).

Returns the ID of the new EHR wrapped in a JSON document.



       @param queryParams_ The query parameters to be added to the request.

       
     */
    public com.medvision360.medrecord.api.ID postEHR(
        final org.restlet.representation.Representation representation,
        final EHRListResourcePostEHRParams queryParams_
    ) throws
        com.medvision360.medrecord.api.exceptions.DuplicateException,
        com.medvision360.medrecord.api.exceptions.ClientParseException,
        com.medvision360.medrecord.api.exceptions.RecordException,
        com.medvision360.medrecord.api.exceptions.IORecordException
    {
        try
        {
            final ClientResource resource_ = getClientResource();
            if (queryParams_ != null)
            {
                queryParams_.applyTo(resource_);
            }

            final com.medvision360.medrecord.api.ehr.EHRListResource wrapped_ = resource_.wrap(com.medvision360.medrecord.api.ehr.EHRListResource.class);
            return wrapped_.postEHR(
                representation
            );
        }
        catch(final ResourceException e_)
        {
            final ErrorDocument errorDocument_ = getErrorDocument();
            if (errorDocument_ != null)
            {
                switch(errorDocument_.getCode())
                {
                    case "DUPLICATE_EXCEPTION":
                        throw new com.medvision360.medrecord.api.exceptions.DuplicateException(errorDocument_.getArguments());
                    case "CLIENT_PARSE_EXCEPTION":
                        throw new com.medvision360.medrecord.api.exceptions.ClientParseException(errorDocument_.getArguments());
                    case "RECORD_EXCEPTION":
                        throw new com.medvision360.medrecord.api.exceptions.RecordException(errorDocument_.getArguments());
                    case "IO_RECORD_EXCEPTION":
                        throw new com.medvision360.medrecord.api.exceptions.IORecordException(errorDocument_.getArguments());
                }
            }
            throw e_;
        }
    }

    /**
       List EHR resources.

Retrieve a list of HierObjectIDs (typically UUIDs, but not always) for all EHRs known to the server
encapsulated in JSON. This API call is of limited use in most practical scenarios, because the result can become
very large, and because typically you will want to constrain the results by some kind of selection or query,
like looking only for particular subjects and their EHRs. Use the <code>/query</code> API for that.

However, this API call is provided nonetheless, for API consistency, completeness and ease of testing.



       <p>
       Use the {@link #listEHRs(EHRListResourceListEHRsParams)}
       method to pass additional query arguments.</p>


       @apiqueryparam includeDeleted Set to true to include EHRs that have been marked as deleted in the
returned list.
[type=string,single,default=false]



     */
    public com.medvision360.medrecord.api.IDList listEHRs(
    ) throws
        com.medvision360.medrecord.api.exceptions.PatternException,
        com.medvision360.medrecord.api.exceptions.ParseException,
        com.medvision360.medrecord.api.exceptions.RecordException,
        com.medvision360.medrecord.api.exceptions.IORecordException
    {
      return listEHRs(
        null
      );
    }

    /**
       List EHR resources.

Retrieve a list of HierObjectIDs (typically UUIDs, but not always) for all EHRs known to the server
encapsulated in JSON. This API call is of limited use in most practical scenarios, because the result can become
very large, and because typically you will want to constrain the results by some kind of selection or query,
like looking only for particular subjects and their EHRs. Use the <code>/query</code> API for that.

However, this API call is provided nonetheless, for API consistency, completeness and ease of testing.



       @param queryParams_ The query parameters to be added to the request.

       @apiqueryparam includeDeleted Set to true to include EHRs that have been marked as deleted in the
returned list.
[type=string,single,default=false]


     */
    public com.medvision360.medrecord.api.IDList listEHRs(
        final EHRListResourceListEHRsParams queryParams_
    ) throws
        com.medvision360.medrecord.api.exceptions.PatternException,
        com.medvision360.medrecord.api.exceptions.ParseException,
        com.medvision360.medrecord.api.exceptions.RecordException,
        com.medvision360.medrecord.api.exceptions.IORecordException
    {
        try
        {
            final ClientResource resource_ = getClientResource();
            if (queryParams_ != null)
            {
                queryParams_.applyTo(resource_);
            }

            final com.medvision360.medrecord.api.ehr.EHRListResource wrapped_ = resource_.wrap(com.medvision360.medrecord.api.ehr.EHRListResource.class);
            return wrapped_.listEHRs(
            );
        }
        catch(final ResourceException e_)
        {
            final ErrorDocument errorDocument_ = getErrorDocument();
            if (errorDocument_ != null)
            {
                switch(errorDocument_.getCode())
                {
                    case "PATTERN_EXCEPTION":
                        throw new com.medvision360.medrecord.api.exceptions.PatternException(errorDocument_.getArguments());
                    case "PARSE_EXCEPTION":
                        throw new com.medvision360.medrecord.api.exceptions.ParseException(errorDocument_.getArguments());
                    case "RECORD_EXCEPTION":
                        throw new com.medvision360.medrecord.api.exceptions.RecordException(errorDocument_.getArguments());
                    case "IO_RECORD_EXCEPTION":
                        throw new com.medvision360.medrecord.api.exceptions.IORecordException(errorDocument_.getArguments());
                }
            }
            throw e_;
        }
    }

}
