// WARNING, THIS FILE IS AUTOMATICALLY GENERATED
// DO NOT MODIFY !

package com.medvision360.medrecord.client.locatable;

import org.restlet.Client;
import org.restlet.data.Language;
import org.restlet.data.Preference;
import org.restlet.resource.ClientResource;
import org.restlet.resource.ResourceException;

import com.medvision360.lib.client.ClientResourceBase;
import com.medvision360.lib.client.ClientResourceConfig;
import com.medvision360.lib.client.ErrorDocument;
import com.medvision360.lib.common.exceptions.AnnotatedResourceException;
import com.medvision360.lib.common.exceptions.ApiException;

/**
    @apipath /locatable/{id}/ehr
 @apipathparam id An OpenEHR UIDBasedID value identifying a Locatable.
   [type=string,required,single,default=71350448-25BA-4395-B354-19B9CA9D5096]

 */
public class LocatableEHRResource extends ClientResourceBase
{
    /**
     * Constructor.
     *
     * <p>This constructor can be used to create a new client for this resource.</p>
     *
     * @param config_ Configuration object containing the location of the server
     *   this resource sends requests to.
     * @param id An OpenEHR UIDBasedID value identifying a Locatable
     */
    public LocatableEHRResource(
        final ClientResourceConfig config_,
        final String id
    )
    {
        super(null, config_, "/locatable/" + id + "/ehr");
    }

    /**
     * Constructor.
     *
     * <p>This constructor can be used to create a new client for this resource.</p>
     *
     * @param client_ The client to use for making the connection.
     * @param config_ Configuration object containing the location of the server
     *   this resource sends requests to.
     * @param id An OpenEHR UIDBasedID value identifying a Locatable
     */
    public LocatableEHRResource(
        final Client client_,
        final ClientResourceConfig config_,
        final String id
    )
    {
        super(client_, config_, "/locatable/" + id + "/ehr");
    }

    /**
       Retrieve locatable its EHR resource.

Retrieve basic info about the EHR containing this locatable as a JSON structure.



       <p>
       Use the {@link #getEHRForLocatable(LocatableEHRResourceGetEHRForLocatableParams)}
       method to pass additional query arguments.</p>


       

     */
    public com.medvision360.medrecord.api.EHR getEHRForLocatable(
    ) throws
        com.medvision360.medrecord.api.exceptions.NotFoundException,
        com.medvision360.medrecord.api.exceptions.ParseException,
        com.medvision360.medrecord.api.exceptions.InvalidLocatableIDException,
        com.medvision360.medrecord.api.exceptions.LocatableHasNoEHRException,
        com.medvision360.medrecord.api.exceptions.RecordException,
        com.medvision360.medrecord.api.exceptions.IORecordException
    {
      return getEHRForLocatable(
        null
      );
    }

    /**
       Retrieve locatable its EHR resource.

Retrieve basic info about the EHR containing this locatable as a JSON structure.



       @param queryParams_ The query parameters to be added to the request.

       
     */
    public com.medvision360.medrecord.api.EHR getEHRForLocatable(
        final LocatableEHRResourceGetEHRForLocatableParams queryParams_
    ) throws
        com.medvision360.medrecord.api.exceptions.NotFoundException,
        com.medvision360.medrecord.api.exceptions.ParseException,
        com.medvision360.medrecord.api.exceptions.InvalidLocatableIDException,
        com.medvision360.medrecord.api.exceptions.LocatableHasNoEHRException,
        com.medvision360.medrecord.api.exceptions.RecordException,
        com.medvision360.medrecord.api.exceptions.IORecordException
    {
        try
        {
            final ClientResource resource_ = getClientResource();
            if (queryParams_ != null)
            {
                queryParams_.applyTo(resource_);
            }

            final com.medvision360.medrecord.api.locatable.LocatableEHRResource wrapped_ = resource_.wrap(com.medvision360.medrecord.api.locatable.LocatableEHRResource.class);
            return wrapped_.getEHRForLocatable(
            );
        }
        catch(final ResourceException e_)
        {
            final ErrorDocument errorDocument_ = getErrorDocument();
            if (errorDocument_ != null)
            {
                switch(errorDocument_.getCode())
                {
                    case "NOT_FOUND_EXCEPTION":
                        throw new com.medvision360.medrecord.api.exceptions.NotFoundException(errorDocument_.getArguments());
                    case "PARSE_EXCEPTION":
                        throw new com.medvision360.medrecord.api.exceptions.ParseException(errorDocument_.getArguments());
                    case "INVALID_LOCATABLE_ID_EXCEPTION":
                        throw new com.medvision360.medrecord.api.exceptions.InvalidLocatableIDException(errorDocument_.getArguments());
                    case "LOCATABLE_HAS_NO_EHR_EXCEPTION":
                        throw new com.medvision360.medrecord.api.exceptions.LocatableHasNoEHRException(errorDocument_.getArguments());
                    case "RECORD_EXCEPTION":
                        throw new com.medvision360.medrecord.api.exceptions.RecordException(errorDocument_.getArguments());
                    case "IO_RECORD_EXCEPTION":
                        throw new com.medvision360.medrecord.api.exceptions.IORecordException(errorDocument_.getArguments());
                }
            }
            throw e_;
        }
    }

}
