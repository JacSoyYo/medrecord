apply plugin: 'medvision-server'

dependencies {
  compile project(":medrecord-engine")
  compile project(":medrecord-server-api-jee")

  testCompile "junit:junit:4.11"
  testCompile "org.restlet.jee:org.restlet.ext.httpclient:${ext.version.restlet}"
  testCompile project(":medrecord-server-client-jee")

  // the artifact containing the swagger docs
  swagger project(path: ":medrecord-server-api-jee", configuration: "swaggerArtifacts")
  swagger "com.medvision360.lib.web:swagger:+:swaggerTool@zip"

    //jsonSchema project(path: ":medrecord-server-api-jee", configuration: "jsonSchemaArtifacts")
}

prepareTomcat {
  // TODO: make sure a special logback config is added to the debian package
  logbackConfig = project.file("logback-test.xml")
}

tomcatRunWar {
  httpPort = 8100
  stopPort = 8101
}

import org.gradle.plugins.ide.idea.model.*
apply plugin: 'idea'

idea.module.iml {
    whenMerged { module ->
        
        // add module dependencies for medvision common libraries
        def toModuleDependencies = [
                'libs-api-jee',
                'libs-client-jee',
                'libs-common-jee',
                'libs-server'
        ]
        
        toModuleDependencies.each { dependencyName ->
            module.dependencies += new ModuleDependency(dependencyName, 'COMPILE')
        }

        // split dependencies into module dependencies and jar dependencies
        def moduleDependencies = []
        module.dependencies.each { dependency ->
            if (dependency.class.simpleName == 'ModuleDependency') {
                if (dependency.scope.equalsIgnoreCase("COMPILE")) {
                    moduleDependencies += dependency
                }
            }
        }

        module.dependencies.removeAll(moduleDependencies)
        def jarDependencies = new LinkedHashSet(module.dependencies)

        module.dependencies.clear()
        module.dependencies.addAll(moduleDependencies)
        module.dependencies.addAll(jarDependencies)
    }
}
