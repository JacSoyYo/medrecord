// some standard settings for Java applications (language level etc)
apply plugin: 'medvision-java'

// do not update the license on code which we do not own
import nl.javadude.gradle.plugins.license.License

tasks.withType(License).each { licenseTask ->
    licenseTask.exclude 'com/medvision360/medrecord/spi/AuditEntry.java'
    licenseTask.exclude 'com/medvision360/medrecord/spi/AuditInfo.java'
}

import org.gradle.plugins.ide.idea.model.*
apply plugin: 'idea'

idea.module.iml {
    whenMerged { module ->
        
        // add module dependencies for vendor libraries
        def toModuleDependencies = [
                'adl-parser',
                'adl-serializer',
                //'archetype-validator',
                'dadl-binding',
                'dadl-parser',
                'measure-serv',
                'mini-termserv',
                //'oet-parser',
                'openehr-aom',
                //'openehr-ap',
                'openehr-rm-core',
                'openehr-rm-domain',
                'rm-builder',
                //'rm-skeleton',
                'xml-binding',
                'xml-serializer',
                
                'libs-api-jee',
                'libs-common-jee'                
        ]
        
        toModuleDependencies.each { dependencyName ->
            module.dependencies += new ModuleDependency(dependencyName, 'COMPILE')
        }

        // split dependencies into module dependencies and jar dependencies
        def moduleDependencies = []
        module.dependencies.each { dependency ->
            if (dependency.class.simpleName == 'ModuleDependency') {
                if (dependency.scope.equalsIgnoreCase("COMPILE")) {
                    moduleDependencies += dependency
                }
            }
        }

        module.dependencies.removeAll(moduleDependencies)
        def jarDependencies = new LinkedHashSet(module.dependencies)

        module.dependencies.clear()
        module.dependencies.addAll(moduleDependencies)
        module.dependencies.addAll(jarDependencies)
    }
}


description = 'MEDvision360 MEDrecord Service Provider Interface'

dependencies {
    compile project(':medrecord-rmutil')
    compile "com.medvision360.lib:libs-api-jee:${ext.version.medvisionlib}"
    compile "com.medvision360.lib:libs-common-jee:${ext.version.medvisionlib}"
    //compile "commons-logging:commons-logging:${ext.version.commonsLogging}"
    compile "org.slf4j:jcl-over-slf4j:${ext.version.slf4j}"
    compile "com.google.guava:guava:${ext.version.guava}"
    compile "openehr:adl-parser:${ext.version.openEhr}"
    compile "openehr:adl-serializer:${ext.version.openEhr}"
    compile "openehr:dadl-binding:${ext.version.openEhr}"
    compile "openehr:dadl-parser:${ext.version.openEhr}"
    compile "openehr:measure-serv:${ext.version.openEhr}"
    compile "openehr:mini-termserv:${ext.version.openEhr}"
    compile "openehr:openehr-aom:${ext.version.openEhr}"
    compile "openehr:openehr-rm-core:${ext.version.openEhr}"
    compile "openehr:openehr-rm-domain:${ext.version.openEhr}"
    compile "openehr:rm-builder:${ext.version.openEhr}"
    //compile "openehr:rm-skeleton:${ext.version.openEhr}"
    compile "openehr:xml-binding:${ext.version.openEhr}"
    compile "openehr:xml-serializer:${ext.version.openEhr}"
}
