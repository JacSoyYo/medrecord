{"name":"Medrecord","tagline":"java web application implementing a REST OpenEHR record server","body":"MEDrecord\r\n=========\r\nThis is the implementation of MEDrecord and its tools. \r\n\r\nUseful links\r\n------------\r\n* Website: https://www.medrecord.nl/en\r\n* Online demo: http://medrecord.test.medvision360.org/medrecord/ (feel free to experiment here!)\r\n* Group for discussing the implementation: https://groups.google.com/a/medrecord.nl/d/forum/dev\r\n* Overview documentation: https://zorggemak.atlassian.net/wiki/display/DOC/MEDrecord\r\n* Javadocs for the Java client: http://repo.medvision360.org/javadoc/medrecord-server-client-jee\r\n\r\n\r\nLicense\r\n=======\r\nThis work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (the \r\n\"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\r\n\r\n* http://creativecommons.org/licenses/by-nc-sa/4.0/\r\n\r\n\r\nGetting started\r\n===============\r\nClone the repository using:\r\n\r\n    git clone --recursive git@github.com:ZorgGemak/medrecord.git\r\n\r\n\r\nThe java server\r\n---------------\r\nSee [java/README.md](java/README.md) for the java server implementation code.\r\n\r\n\r\nRequired archetypes\r\n-------------------\r\nFor its integration tests, the java server utilizes a jar containing archetypes from the OpenEHR CKM repository.\r\nSee [archetypes/README.md](archetypes/README.md) for how to build and install this jar yourself.\r\n\r\n\r\nThe java client\r\n---------------\r\nThe primary way for interacting with MEDrecord is through its `v2` REST API. That API is built with\r\n[restlet](http://restlet.org/). It's designed to be easy to use from any client, including from javascript.\r\n\r\nWe have special support for java-based projects: thanks to some of our own nifty extensions built on top of restlet, \r\nwe also auto-generate a restlet client library in java.\r\n\r\nBecause this client library shares API definition code with the server, it is always in sync with the server API. If \r\nyou're talking to the MEDrecord API from java or android, we highly recommend using this client library rather than\r\ncreating your own.\r\n\r\nYou can see an example of this java client in use in the [cliclient](java/medrecord-tools/medrecord-tools-cliclient) \r\nmodule. For example, its\r\n[RemoteArchetypeStore](java/medrecord-tools/medrecord-tools-cliclient/src/main/java/com/medvision360/medrecord/tools/cliclient/RemoteArchetypeStore.java#L47)\r\nshows how easy it is to work with the\r\n[/v2/archetype](http://medrecord.test.medvision360.org/medrecord/v2/apidocs/#!/com_medvision360_medrecord_api_archetype)\r\nAPI using the java client.\r\n\r\nFull javadocs are available at\r\n* http://repo.medvision360.org/javadoc/medrecord-server-client-jee/\r\n\r\nPrebuilt versions of the java client are available from our release maven repository at\r\nhttp://repo.medvision360.org/release/ .\r\n\r\nTo use our repository with maven, add it to your `pom.xml`:\r\n\r\n    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n      xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\r\n                          http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n      ...\r\n      <repositories>\r\n        <repository>\r\n          <releases>\r\n            <enabled>false</enabled>\r\n            <updatePolicy>always</updatePolicy>\r\n            <checksumPolicy>warn</checksumPolicy>\r\n          </releases>\r\n          <snapshots>\r\n            <enabled>true</enabled>\r\n            <updatePolicy>interval:600</updatePolicy>\r\n            <checksumPolicy>warn</checksumPolicy>\r\n          </snapshots>\r\n          <id>mvSnapshots</id>\r\n          <name>MEDvision Snapshots</name>\r\n          <url>http://repo.medvision360.org/snapshot/</url>\r\n          <layout>default</layout>\r\n        </repository>\r\n        <repository>\r\n          <releases>\r\n            <enabled>true</enabled>\r\n            <updatePolicy>always</updatePolicy>\r\n            <checksumPolicy>warn</checksumPolicy>\r\n          </releases>\r\n          <snapshots>\r\n            <enabled>false</enabled>\r\n            <updatePolicy>interval:600</updatePolicy>\r\n            <checksumPolicy>warn</checksumPolicy>\r\n          </snapshots>\r\n          <id>mvReleases</id>\r\n          <name>MEDvision Releases</name>\r\n          <url>http://repo.medvision360.org/release/</url>\r\n          <layout>default</layout>\r\n        </repository>\r\n      </repositories>\r\n      ...\r\n    </project>\r\n\r\nAfter that, you can declare a dependency like so:\r\n\r\n    <dependency>\r\n      <groupId>com.medvision360.medrecord</groupId>\r\n      <artifactId>medrecord-server-client-jee</artifactId>\r\n      <version>2.0.0.20</version>\r\n    </dependency>\r\n\r\n(Make sure to bump the version to the latest available release).\r\n\r\nOf course in gradle it looks similar, though we recommend specifying a version range of 2.+:\r\n\r\n    ...\r\n    repositories {\r\n        maven {\r\n            url \"http://repo.medvision360.org/release/\"\r\n        }\r\n        maven {\r\n            url \"http://repo.medvision360.org/snapshot/\"\r\n        }\r\n        ...\r\n    }\r\n    ...\r\n    dependencies {\r\n        compile \"com.medvision360.medrecord:medrecord-server-client-jee:2.+\"\r\n        ...\r\n    }\r\n\r\nThe client library depends on restlet. To allow using it with either the jee or android versions of restlet, \r\nwe do not specify that dependency for you, and you need to add it yourself. Restlet 2.2M1 or later is required.\r\n\r\nSimilarly, while the client code itself does not do any logging, restlet does. We prefer to configure restlet to log \r\nvia slf4j to logback, see\r\n[ArchetypeUploader](java/medrecord-tools/medrecord-tools-cliclient/src/main/java/com/medvision360/medrecord/tools/cliclient/ArchetypeUploader.java#L46)\r\nfor an example. We recommend you do the same, which means also adding dependencies on slf4j and logback.\r\n\r\nPutting all this together, using gradle as an example, you should end up with something like\r\n\r\n    repositories {\r\n        maven {\r\n            url \"http://repo.medvision360.org/release/\"\r\n        }\r\n        maven {\r\n            url \"http://repo.medvision360.org/snapshot/\"\r\n        }\r\n\r\n        ...\r\n        \r\n        maven {\r\n          url 'http://maven.restlet.org'\r\n        }\r\n    }\r\n    \r\n    dependencies {\r\n        ...\r\n        compile \"com.medvision360.medrecord:medrecord-server-client-jee:${ext.version.medrecord}\"\r\n        \r\n        compile \"org.restlet.jee:org.restlet.ext.httpclient:${ext.version.restlet}\"\r\n        compile \"org.restlet.jee:org.restlet.ext.slf4j:${ext.version.restlet}\"\r\n    \r\n        compile \"org.slf4j:slf4j-api:${ext.version.slf4j}\"\r\n        compile \"ch.qos.logback:logback-classic:${ext.version.logback}\"\r\n        compile \"org.slf4j:jcl-over-slf4j:${ext.version.slf4j}\"\r\n        compile \"org.slf4j:log4j-over-slf4j:${ext.version.slf4j}\"\r\n        compile \"org.slf4j:jul-to-slf4j:${ext.version.slf4j}\"\r\n    }\r\n    \r\n    ext {\r\n        version = [\r\n                medrecord           : '2.+',\r\n                logback             : '1.0.13',\r\n                restlet             : '2.2-M1',\r\n                slf4j               : '1.7.5',\r\n        ]\r\n    }\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}